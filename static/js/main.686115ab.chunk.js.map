{"version":3,"sources":["utils/API.js","Components/Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["API","getEmployees","axios","get","Jumbo","props","Jumbotron","fluid","Container","className","App","useState","employees","setEmployees","input","setInput","isAscending","setIsAscending","useEffect","then","res","console","log","data","results","catch","err","class","style","width","margin","value","onChange","e","target","placeholder","onClick","sortedEmployeeName","sort","a","b","nameA","name","first","toUpperCase","nameB","sortedEmployeesAge","dob","age","filter","emp","last","toLowerCase","includes","map","employee","index","src","picture","medium","alt","cell","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.686115ab.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = {\r\n    getEmployees:() => {\r\n        return axios.get('https://randomuser.me/api/?results=5&nat=us')\r\n    }\r\n}\r\n\r\nexport default API;","import React from 'react';\r\nimport { Jumbotron, Container } from 'reactstrap';\r\n\r\nconst Jumbo = (props) => {\r\n    return (\r\n        <div>\r\n            <Jumbotron fluid>\r\n                <Container fluid>\r\n                    <h1 className=\"display-3\">Employee Directory</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Jumbo;","import React, {useState, useEffect} from \"react\";\nimport API from \"./utils/API\";\nimport Jumbo from \"./Components/Header/index\";\n\n\nfunction App() {\n  const [employees, setEmployees] = useState([])\n  const [input, setInput] = useState(\"\");\n  const [isAscending, setIsAscending] = useState(true);\n  \n  useEffect(() => {\n    API.getEmployees()\n    .then(res => {\n      console.log(res.data.results);\n      setEmployees(res.data.results)\n    }) \n    .catch(err => {\n      console.log(err)\n    })\n  }, [])\n  \n  const sortEmployeeAge = () => {\n    const sortedEmployeesAge = [...employees]\n    if (isAscending){\n      sortedEmployeesAge.sort((a, b) => a.dob.age - b.dob.age)\n      setIsAscending(false);\n    }\n    else {\n      sortedEmployeesAge.sort((a, b) => b.dob.age - a.dob.age)\n      setIsAscending(true);\n    }\n    setEmployees(sortedEmployeesAge);\n    \n  };\n\n  const sortEmployeeName = () => {\n    const sortedEmployeeName = [...employees]\n    sortedEmployeeName.sort((a, b) => {\n      var nameA = a.name.first.toUpperCase(); \n      var nameB = b.name.first.toUpperCase(); \n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n    if (isAscending) {\n      sortedEmployeeName.sort((a, b) => {\n        var nameA = a.name.first.toUpperCase();\n        var nameB = b.name.first.toUpperCase();\n        if (nameA < nameB) {\n          return 1;\n        }\n        if (nameA > nameB) {\n          return -1;\n        }\n        return 0;\n      });\n      setIsAscending(false);\n    }\n    else {\n      sortedEmployeeName.sort((a, b) => {\n        var nameA = a.name.first.toUpperCase(); \n        var nameB = b.name.first.toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      setIsAscending(true);\n    }\n    setEmployees(sortedEmployeeName);\n  }\n\n  return (\n    <div>\n      <Jumbo />\n      <div class=\"form-row justify-content-center\">\n      <input style={{width: '50%' , margin: 15}}value={input} onChange={e => setInput(e.target.value)} placeholder=\"Search for an Employee\"></input>\n      <div className=\"container\">\n      <table className=\"table\">\n        <tr>\n          <th>Image</th>\n          <th onClick={sortEmployeeName}>First Name</th>\n          <th>Last Name</th>\n          <th onClick={sortEmployeeAge}>Age</th>\n          <th>Phone number</th>\n        </tr>\n      {employees.filter(emp => `${emp.name.first} ${emp.name.last}`.toLowerCase().includes(input)).map((employee, index) => (\n        <tr key={index}>\n        <th><img src={employee.picture.medium} alt={\"employee portrait\"}></img></th>\n        <td>{employee.name.first}</td>\n        <td>{employee.name.last}</td>\n        <td>{employee.dob.age}</td>\n        <td>{employee.cell}</td>\n        </tr>\n      ))}\n      </table>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}